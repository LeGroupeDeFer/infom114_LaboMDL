{
  "openapi": "3.0.1",
  "info": {
    "title": "UNAnimity",
    "version": "0.2.0"
  },
  "servers": [{
    "url": "https://unanimity.be"
  }],
  "tags": [{
      "name": "auth",
      "description": "Everything that is related to authentication"
    },
    {
      "name": "post",
      "description": "Everything related to posts"
    }
  ],
  "paths": {
    "/register": {
      "get": {
        "tags": ["auth", "hollow"],
        "description": "Fetch the form to create a new user on the platform",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": ["auth"],
        "description": "Send user information and login credentials for a new account on the application",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity : missing parameter",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "property 'email' is missing"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": ["auth", "hollow"],
        "description": "Fetch the login page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["auth"],
        "description": "Send login credentials for authentication",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The username credential"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password credential"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSuccessUserInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Wrong email/password association"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity : missing parameter",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "property 'email' is missing"
                }
              }
            }
          }
        }
      }
    },
    "/activate/{id}/{token}": {
      "get": {
        "tags": ["auth", "hollow"],
        "description": "",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/api/auth/activate": {
      "post": {
        "tags": ["auth"],
        "description": "",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["id", "token"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The user id, it must be related to a valid user"
                  },
                  "token": {
                    "type": "string",
                    "description": "The generated token sent for the activation."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "reason: Incorrect activation scheme"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": ["post"],
        "summary": "Fetch posts according to the parameters",
        "parameters": [
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of tags used to filter posts"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of strings used to filter posts. We look for the strings in the post's content, title and username"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": ["old", "new", "top"]
            },
            "description": "The criteria used to sort posts"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": ["info", "idea", "pool", "decisional"]
            },
            "description": "The type used to filter posts"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of posts to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of posts to skip before starting to collect the result set"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["post"],
        "summary": "Add a new post",
        "requestBody": {
          "required": true,
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "put": {
        "tags": ["post"],
        "summary": "Update an existing post",
        "requestBody": {
          "required": true,
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Post not found"
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/posts/{post_id}": {
      "get": {
        "tags": ["post"],
        "summary": "Find post by id",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of post to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "delete": {
        "tags": ["post"],
        "summary": "Delete a post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of post to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Post not found"
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/posts/up_down_vote": {
      "post": {
        "tags": ["post"],
        "summary": "Add an up/down vote",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/UpDownVote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "UserAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "user_id"
      }
    },
    "schemas": {
      "Info": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "UserRegisterInformation": {
        "type": "object",
        "required": ["email", "firstname", "lastname", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address for the user to be contacted"
          },
          "password": {
            "type": "string",
            "description": "The password that the user will use to log on the platform"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user"
          },
          "address": {
            "type": "object",
            "required": ["street", "number", "city", "zipcode", "country"],
            "properties": {
              "street": {
                "type": "string",
                "description": "The street name of the address of the user"
              },
              "number": {
                "type": "integer",
                "description": "The house number of the address of the user",
                "format": "int32"
              },
              "city": {
                "type": "string",
                "description": "The city where the user lives in"
              },
              "zipcode": {
                "type": "integer",
                "description": "The zip code of the address of the user",
                "format": "int32"
              },
              "country": {
                "type": "string",
                "description": "The country where the user lives in"
              },
              "box_number": {
                "type": "string",
                "description": "The mail box number of the user"
              }
            }
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the user"
          }
        }
      },
      "AuthSuccessUserInformation": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The id of the user"
              },
              "firstname": {
                "type": "string",
                "description": "The first name of the user"
              },
              "lastname": {
                "type": "string",
                "description": "The last name of the user"
              },
              "street": {
                "type": "string",
                "description": "The street name of the address of the user"
              },
              "phone": {
                "type": "string",
                "description": "The phone number of the user"
              },
              "creation_date": {
                "type": "string",
                "description": "The date when the user was created"
              },
              "last_connection": {
                "type": "string",
                "description": "The date when the user connected last time"
              }
            }
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "voteCount": {
            "type": "integer"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "UpDownVote": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "string"
          },
          "cancel": {
            "type": "boolean"
          },
          "action": {
            "type": "integer",
            "enum": [2, 1, -1, -2]
          }
        }
      }
    }
  }
}