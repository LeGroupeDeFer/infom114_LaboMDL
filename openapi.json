{
  "openapi": "3.0.1",
  "info": {
    "title": "UNAnimity",
    "version": "0.2.4"
  },
  "servers": [
    {
      "url": "https://unanimity.be"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Everything that is related to authentication"
    },
    {
      "name": "admin",
      "description": "Everything related to administration"
    },
    {
      "name": "post",
      "description": "Everything related to posts"
    },
    {
      "name": "comment",
      "description": "Everything related to comment"
    },
    {
      "name": "tag",
      "description": "Everything that is related to tags"
    },
    {
      "name":  "poll",
      "description": "Post poll kind"
    },
    {
      "name": "role",
      "description": "Everything that is related to role management"
    },
    {
      "name": "user",
      "description": "Everything that is related to users"
    },
    {
      "name": "reporting",
      "description": "Everything related to stats about the site"
    },
    {
      "name": "hollow",
      "description": "Hollow routes that are managed by React"
    }
  ],
  "paths": {
    "/register": {
      "get": {
        "tags": [
          "auth",
          "hollow"
        ],
        "description": "Fetch the form to create a new user on the platform",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Send user information and login credentials for a new account on the application",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity : missing parameter",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "property 'email' is missing"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": [
          "auth",
          "hollow"
        ],
        "description": "Fetch the login page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Send login credentials for authentication",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The username credential"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password credential"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSuccessUserInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Wrong email/password association"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity : missing parameter",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "property 'email' is missing"
                }
              }
            }
          }
        }
      }
    },
    "/activate/{id}/{token}": {
      "get": {
        "tags": [
          "auth",
          "hollow"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "user token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/api/auth/activate": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "id",
                  "token"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The user id, it must be related to a valid user"
                  },
                  "token": {
                    "type": "string",
                    "description": "The generated token sent for the activation."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "reason: Incorrect activation scheme"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "auth",
          "hollow"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/admin/flagged_post": {
      "get": {
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "Fetch all the reported posts and comments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/trending_post": {
      "get": {
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "Fetch the most active posts and comments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/hide_resource": {
      "post": {
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "Hide (or unhide - if already hide) a post or a comment",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ressourceId": {
                    "type": "string",
                    "description": "The id of the post or the comment we want to hide or unhide"
                  },
                  "isComment": {
                    "type": "boolean",
                    "description": "indicate whether the ressource is a post (false) or a comment (true)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity : entity does not exist",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "property 'ressourceId' does not exist"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/edit_post": {
      "post": {
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "Edit a post or a comment",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ressourceId": {
                    "type": "string",
                    "description": "The id of the post/comment to edit"
                  },
                  "isComment": {
                    "type": "boolean",
                    "description": "indicate whether the ressource is a post (false) or a comment (true)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity : entity does not exist",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "property 'ressourceId' does not exist"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/close_discussion": {
      "post": {
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "Mark the discussion of a post as closed",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "type": "object",
                "properties": {
                  "postId": {
                    "type": "string",
                    "description": "The id of the post the discussion is associated with"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity : entity does not exist",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "property 'postId' does not exist"
                }
              }
            }
          }
        }
      }
    },
    "/api/posts": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Fetch posts according to the parameters",
        "parameters": [
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of tags used to filter posts"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of strings used to filter posts. We look for the strings in the post's content, title and username"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "old",
                "new",
                "top"
              ]
            },
            "description": "The criteria used to sort posts"
          },
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "type": "string",
              "enum": [
                "info",
                "idea",
                "poll"
              ]
            },
            "description": "The type used to filter posts"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of posts to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of posts to skip before starting to collect the result set"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/post": {
      "post": {
        "tags": [
          "post"
        ],
        "summary": "Add a new post",
        "requestBody": {
          "required": true,
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/NewPost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "There is a missing property in the json given"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/post/{post_id}": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Find post by id",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of post to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "post"
        ],
        "summary": "Update an existing post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/NewPost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "There is a missing property in the json given"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "post"
        ],
        "summary": "Delete a post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/post/{post_id}/vote": {
      "post": {
        "tags": [
          "post"
        ],
        "summary": "Add an up/down vote",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/UpVote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "There is a missing property in the json given"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/post/{post_id}/hide": {
      "post": {
        "tags": [
          "post"
        ],
        "summary": "Hide a post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/post/{post_id}/lock": {
      "post": {
        "tags": [
          "post"
        ],
        "summary": "Lock a post, preventing the creation of any new comment and/or reply",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/post/{post_id}/watch": {
      "post": {
        "tags": [
          "post"
        ],
        "summary": "Watch a post, marking it in a special way",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/post/{post_id}/report": {
      "post": {
        "tags": [
          "post"
        ],
        "summary": "Report a post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/ReportReason"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/post/{post_id}/comments": {
      "get": {
        "tags": [
          "post",
          "comment"
        ],
        "summary": "Get the comments of a post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "time",
                "score"
              ],
              "default": "time"
            },
            "description": "The type used to filter comment"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The type used to filter comment"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of comments to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of comments to skip before starting to collect the result set"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          }
        }
      }
    },
    "/api/post/{post_id}/comment": {
      "post": {
        "tags": [
          "post",
          "comment"
        ],
        "summary": "Comment on a post or another comment",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "comment_id",
            "in": "query",
            "description": "Id of the comment/reply",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/NewComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/comment/{comment_id}": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "Get the comment identified by its id",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "comment"
        ],
        "summary": "Create a comment as a reply",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/NewComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "There is a missing property in the given json"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "comment"
        ],
        "summary": "Update a comment",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/NewComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "There is a missing property in the given json"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "comment"
        ],
        "summary": "Delete a comment",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/comment/{comment_id}/report": {
      "post": {
        "tags": [
          "comment"
        ],
        "summary": "Report a comment",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "Id of the comment",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/comment/{comment_id}/vote": {
      "post": {
        "tags": [
          "comment"
        ],
        "summary": "Add an up/down vote",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "Id of the comment",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/UpVote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "There is a missing property in the json given"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/comment/{comment_id}/hide": {
      "post": {
        "tags": [
          "comment"
        ],
        "summary": "Hide a comment",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "Id of the comment",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/comment/{comment_id}/lock": {
      "post": {
        "tags": [
          "comment"
        ],
        "summary": "Lock a comment, preventing the creation of any new comment and/or reply",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "Id of the comment",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User cannot do this"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/tags": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Return all tags of the application",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tag/{tag_name}": {
      "post": {
        "tags": [
          "tag"
        ],
        "summary": "Create a tag",
        "parameters": [
          {
            "name": "tag_name",
            "in": "path",
            "description": "Label of the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "409": {
            "description": "Conflict",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "A tag with this name already exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "tag"
        ],
        "summary": "Update a tag",
        "parameters": [
          {
            "name": "tag_name",
            "in": "path",
            "description": "Label of the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "A tag with this name already exist"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "The targeted tag does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tag"
        ],
        "summary": "Update a tag",
        "parameters": [
          {
            "name": "tag_name",
            "in": "path",
            "description": "Label of the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "The targeted tag does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Return all roles of the application",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/role": {
      "post": {
        "tags": [
          "role"
        ],
        "summary": "Create a new role",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "A role with this name already exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/role/{role_id}": {
      "put": {
        "tags": [
          "role"
        ],
        "summary": "Update a role",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "Id of the role",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "A role with this name already exist"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "The targeted role does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "role"
        ],
        "summary": "Delete a role",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "Id of the role",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "The targeted role does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/capabilities": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Return all capabilities of the application",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Capability"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/user/role": {
      "post": {
        "tags": [
          "role",
          "user"
        ],
        "summary": "Assign a role to a user",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer"
                  },
                  "role_id": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "The targeted role does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "role",
          "user"
        ],
        "summary": "Remove a role from a user",
        "requestBody": {
          "content": {
            "json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer"
                  },
                  "role_id": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request : the given format is incorrect",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "json format is required"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "The targeted role does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Return all users of the application",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/user/{user_id}/posts": {
      "get": {
        "tags": [
          "post", "user"
        ],
        "summary": "Get the posts written by the given user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Missing capability"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/user/subscriptions": {
      "get": {
        "tags": [
          "tag",
          "user"
        ],
        "summary": "Get all the tags subscription of the current user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagSubscription"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/user/subscription/{tag_name}": {
      "post": {
        "tags": [
          "tag",
          "user"
        ],
        "summary": "Let the current user subscribe to a tag",
        "parameters": [
          {
            "name": "tag_name",
            "in": "path",
            "description": "Label of the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User has already subscribed to the tag"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "The targeted tag does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tag",
          "user"
        ],
        "summary": "Unsubscribe the current user to the tag",
        "parameters": [
          {
            "name": "tag_name",
            "in": "path",
            "description": "Label of the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "The targeted tag does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/post/{post_id}/poll": {
      "post": {
        "tags": [
          "post", "poll"
        ],
        "summary": "Vote for an answer in a post poll",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "description": "Id of the post",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "json": {
              "schema": {
                "$ref": "#/components/schemas/PollVote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "Invalid ID supplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                },
                "example": {
                  "message": "User is not authenticated"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/report/users": {
      "get": {
        "tags": [
          "user",
          "reporting"
        ],
        "summary": "Return the total number of users and the number of active one",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                    "$ref": "#/components/schemas/UserReport"
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/report/activity": {
      "get": {
        "tags": [
          "post",
          "reporting"
        ],
        "summary": "Return the number of posts created per month of the actual year",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostReport"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/report/post_reported": {
      "get": {
        "tags": [
          "post",
          "reporting"
        ],
        "summary": "Return the flagged posts & the reason",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostReportedReport"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    },
    "/api/report/tags": {
      "get": {
        "tags": [
          "tag",
          "reporting"
        ],
        "summary": "Return the number of use of each tag",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagReport"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "UserAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "UserAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Bearer"
      }
    },
    "schemas": {
      "Info": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "The street name of the address of the user"
          },
          "number": {
            "type": "integer",
            "description": "The house number of the address of the user",
            "format": "int32"
          },
          "city": {
            "type": "string",
            "description": "The city where the user lives in"
          },
          "zipcode": {
            "type": "integer",
            "description": "The zip code of the address of the user",
            "format": "int32"
          },
          "country": {
            "type": "string",
            "description": "The country where the user lives in"
          },
          "box_number": {
            "type": "string",
            "description": "The mail box number of the user"
          }
        },
        "required": [
          "street",
          "number",
          "city",
          "zipcode",
          "country"
        ]
      },
      "UserRegisterInformation": {
        "type": "object",
        "required": [
          "email",
          "firstname",
          "lastname",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address for the user to be contacted"
          },
          "password": {
            "type": "string",
            "description": "The password that the user will use to log on the platform"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the user"
          }
        }
      },
      "AuthSuccessUserInformation": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The id of the user"
              },
              "firstname": {
                "type": "string",
                "description": "The first name of the user"
              },
              "lastname": {
                "type": "string",
                "description": "The last name of the user"
              },
              "address": {
                "$ref": "#/components/schemas/Address"
              },
              "phone": {
                "type": "string",
                "description": "The phone number of the user"
              },
              "creation_date": {
                "type": "string",
                "description": "The date when the user was created"
              },
              "last_connection": {
                "type": "string",
                "description": "The date when the user connected last time"
              }
            }
          }
        }
      },
      "NewPost": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "info",
              "idea",
              "poll"
            ]
          },
          "content": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "updated_on": {
            "type": "string"
          },
          "voteCount": {
            "type": "integer"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "self_vote": {
            "type": "integer"
          }
        }
      },
      "PollPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollAnswer"
            }
          },
          "user_answer": {
            "$ref": "#/components/schemas/PollAnswerEntity"
          }
        }
      },
      "PollVote": {
        "type": "object",
        "properties": {
          "answer_id": {
            "type": "integer"
          }
        }
      },
      "PollAnswer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "answer": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "PollAnswerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "answer": {
            "type": "string"
          }
        }
      },
      "UpVote": {
        "type": "object",
        "properties": {
          "vote": {
            "type": "integer",
            "enum": [
              -1,
              0,
              1
            ]
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "TagSubscription": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Capability"
            }
          }
        }
      },
      "Capability": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "NewComment": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "post_id": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "votes": {
            "type": "integer"
          },
          "score": {
            "type": "integer"
          },
          "rank": {
            "type": "number"
          },
          "is_watched": {
            "type": "boolean"
          },
          "self_vote": {
            "type": "integer"
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "ReportReason": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          }
        }
      },
      "UserReport": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "active": {
            "type": "integer"
          },
          "connected": {
            "type": "integer"
          }
        }
      },
      "PostReport": {
        "type": "object",
        "properties": {
          "month": {
            "type": "string"
          },
          "new": {
            "type": "integer"
          },
          "interaction": {
            "type": "integer"
          }
        }
      },
      "PostReportedReport": {
        "type": "object",
        "properties": {
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "count_flag": {
            "type": "integer"
          },
          "reasons": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TagReport": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          },
          "info":{
            "type": "integer"
          },
          "idea": {
            "type": "integer"
          },
          "poll": {
            "type": "integer"
          }
        }
      }
    }
  }
}
